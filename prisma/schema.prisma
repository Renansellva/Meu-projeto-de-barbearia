// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  name               String
  email              String          @unique
  password           String?
  phone              String? 
  emailVerified      DateTime?
  image              String?
  role               String          @default("CLIENT") // CLIENT, BARBER, ADMIN
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  accounts           Account[]
  sessions           Session[]
  clientAppointments Appointment[]   @relation("ClientAppointments")
  
  barber             Barber?
  availability       Availability[]
  auditLogs          AuditLog[]
}

model Barber {
  id           String         @id @default(cuid())
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialties  String[]
  bio          String?
  rating       Float?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  services     Service[]
  appointments Appointment[]
  availability Availability[]
}

model Service {
  id           String        @id @default(cuid())
  name         String
  description  String?
  price        Decimal       @db.Decimal(10, 2)
  duration     Int // Duração em minutos
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  barbers      Barber[]
  appointments Appointment[]
}

model Appointment {
  id         String    @id @default(cuid())
  clientId   String
  client     User      @relation("ClientAppointments", fields: [clientId], references: [id])
  barberId   String
  barber     Barber    @relation(fields: [barberId], references: [id])
  serviceId  String
  service    Service   @relation(fields: [serviceId], references: [id])
  date       DateTime
  status     String    @default("CONFIRMED") // CONFIRMED, CANCELLED, COMPLETED
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  auditLogs  AuditLog[]
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  barberId  String
  barber    Barber   @relation(fields: [barberId], references: [id])
  dayOfWeek Int // 0 = Domingo, 1 = Segunda, ...
  startTime String // "09:00"
  endTime   String // "18:00"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id        String      @id @default(cuid())
  action    String
  entity    String
  entityId  String
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  details   Json?
  createdAt DateTime    @default(now())
  appointmentId String?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
}